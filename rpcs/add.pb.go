// Code generated by protoc-gen-go. DO NOT EDIT.
// source: add.proto

package rpcs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddInput struct {
	A                    float32  `protobuf:"fixed32,1,opt,name=A,proto3" json:"A,omitempty"`
	B                    float32  `protobuf:"fixed32,2,opt,name=B,proto3" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddInput) Reset()         { *m = AddInput{} }
func (m *AddInput) String() string { return proto.CompactTextString(m) }
func (*AddInput) ProtoMessage()    {}
func (*AddInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_077cd88a1973142f, []int{0}
}

func (m *AddInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddInput.Unmarshal(m, b)
}
func (m *AddInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddInput.Marshal(b, m, deterministic)
}
func (m *AddInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddInput.Merge(m, src)
}
func (m *AddInput) XXX_Size() int {
	return xxx_messageInfo_AddInput.Size(m)
}
func (m *AddInput) XXX_DiscardUnknown() {
	xxx_messageInfo_AddInput.DiscardUnknown(m)
}

var xxx_messageInfo_AddInput proto.InternalMessageInfo

func (m *AddInput) GetA() float32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *AddInput) GetB() float32 {
	if m != nil {
		return m.B
	}
	return 0
}

type AddOutput struct {
	Sum                  float32  `protobuf:"fixed32,1,opt,name=Sum,proto3" json:"Sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddOutput) Reset()         { *m = AddOutput{} }
func (m *AddOutput) String() string { return proto.CompactTextString(m) }
func (*AddOutput) ProtoMessage()    {}
func (*AddOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_077cd88a1973142f, []int{1}
}

func (m *AddOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddOutput.Unmarshal(m, b)
}
func (m *AddOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddOutput.Marshal(b, m, deterministic)
}
func (m *AddOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOutput.Merge(m, src)
}
func (m *AddOutput) XXX_Size() int {
	return xxx_messageInfo_AddOutput.Size(m)
}
func (m *AddOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOutput.DiscardUnknown(m)
}

var xxx_messageInfo_AddOutput proto.InternalMessageInfo

func (m *AddOutput) GetSum() float32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func init() {
	proto.RegisterType((*AddInput)(nil), "rpcs.AddInput")
	proto.RegisterType((*AddOutput)(nil), "rpcs.AddOutput")
}

func init() { proto.RegisterFile("add.proto", fileDescriptor_077cd88a1973142f) }

var fileDescriptor_077cd88a1973142f = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4c, 0x49, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x2a, 0x48, 0x2e, 0x56, 0x52, 0xe3, 0xe2, 0x70,
	0x4c, 0x49, 0xf1, 0xcc, 0x2b, 0x28, 0x2d, 0x11, 0xe2, 0xe1, 0x62, 0x74, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0a, 0x62, 0x74, 0x04, 0xf1, 0x9c, 0x24, 0x98, 0x20, 0x3c, 0x27, 0x25, 0x59, 0x2e,
	0x4e, 0xc7, 0x94, 0x14, 0xff, 0xd2, 0x12, 0x90, 0x42, 0x01, 0x2e, 0xe6, 0xe0, 0xd2, 0x5c, 0xa8,
	0x52, 0x10, 0xd3, 0xc8, 0x8c, 0x8b, 0xcb, 0xb1, 0x28, 0xb3, 0x24, 0x23, 0x37, 0xb5, 0x24, 0x33,
	0x59, 0x48, 0x83, 0x8b, 0xd9, 0x31, 0x25, 0x45, 0x88, 0x4f, 0x0f, 0x64, 0x85, 0x1e, 0xcc, 0x7c,
	0x29, 0x7e, 0x38, 0x1f, 0x62, 0x8e, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x2d, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb7, 0x35, 0x5d, 0xa6, 0x98, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArithmeticClient is the client API for Arithmetic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithmeticClient interface {
	Add(ctx context.Context, in *AddInput, opts ...grpc.CallOption) (*AddOutput, error)
}

type arithmeticClient struct {
	cc *grpc.ClientConn
}

func NewArithmeticClient(cc *grpc.ClientConn) ArithmeticClient {
	return &arithmeticClient{cc}
}

func (c *arithmeticClient) Add(ctx context.Context, in *AddInput, opts ...grpc.CallOption) (*AddOutput, error) {
	out := new(AddOutput)
	err := c.cc.Invoke(ctx, "/rpcs.Arithmetic/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServer is the server API for Arithmetic service.
type ArithmeticServer interface {
	Add(context.Context, *AddInput) (*AddOutput, error)
}

func RegisterArithmeticServer(s *grpc.Server, srv ArithmeticServer) {
	s.RegisterService(&_Arithmetic_serviceDesc, srv)
}

func _Arithmetic_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcs.Arithmetic/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Add(ctx, req.(*AddInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arithmetic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcs.Arithmetic",
	HandlerType: (*ArithmeticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Arithmetic_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "add.proto",
}
